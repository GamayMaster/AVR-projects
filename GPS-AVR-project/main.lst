
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000017a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  0080006e  0080006e  0000021c  2**0
                  ALLOC
  3 .stab         00000864  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f67  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000019e7  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019f8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  00001f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000023bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  000023d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3f       	cpi	r26, 0xF0	; 240
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  8a:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
volatile uint8_t gps_message_complete = 0;


void USART_Init(void)
{
    UBRRH   = (byte)(UBRR_VALUE>>8);
  92:	10 bc       	out	0x20, r1	; 32
    UBRRL   = (byte)UBRR_VALUE;
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9

    SET_BIT(UCSRB, TXEN);
  98:	53 9a       	sbi	0x0a, 3	; 10
    SET_BIT(UCSRB, RXEN);
  9a:	54 9a       	sbi	0x0a, 4	; 10

    SET_BIT(UCSRC, UCSZ0);
  9c:	80 b5       	in	r24, 0x20	; 32
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	80 bd       	out	0x20, r24	; 32
    SET_BIT(UCSRC, UCSZ1);
  a2:	80 b5       	in	r24, 0x20	; 32
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	80 bd       	out	0x20, r24	; 32
    SET_BIT(UCSRC, URSEL);
  a8:	80 b5       	in	r24, 0x20	; 32
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	80 bd       	out	0x20, r24	; 32
  ae:	08 95       	ret

000000b0 <USART_SendByte>:
}

void USART_SendByte(byte data)
{
    while (READ_BIT(UCSRA, UDRE) == 0);
  b0:	5d 9b       	sbis	0x0b, 5	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <USART_SendByte>
    UDR = data;
  b4:	8c b9       	out	0x0c, r24	; 12
  b6:	08 95       	ret

000000b8 <USART_SendString>:
}

void USART_SendString(const char* str) {
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	dc 01       	movw	r26, r24
  be:	ec 01       	movw	r28, r24
    for (int i = 0; i < strlen(str); i++) {
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	fd 01       	movw	r30, r26
  c6:	01 90       	ld	r0, Z+
  c8:	00 20       	and	r0, r0
  ca:	e9 f7       	brne	.-6      	; 0xc6 <USART_SendString+0xe>
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	ea 1b       	sub	r30, r26
  d0:	fb 0b       	sbc	r31, r27
  d2:	2e 17       	cp	r18, r30
  d4:	3f 07       	cpc	r19, r31
  d6:	38 f4       	brcc	.+14     	; 0xe6 <USART_SendString+0x2e>
        USART_SendByte(str[i]);
  d8:	89 91       	ld	r24, Y+
    SET_BIT(UCSRC, URSEL);
}

void USART_SendByte(byte data)
{
    while (READ_BIT(UCSRA, UDRE) == 0);
  da:	5d 9b       	sbis	0x0b, 5	; 11
  dc:	fe cf       	rjmp	.-4      	; 0xda <USART_SendString+0x22>
    UDR = data;
  de:	8c b9       	out	0x0c, r24	; 12
}

void USART_SendString(const char* str) {
    for (int i = 0; i < strlen(str); i++) {
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	ef cf       	rjmp	.-34     	; 0xc4 <USART_SendString+0xc>
        USART_SendByte(str[i]);
    }
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <USART_RX_vect>:

// USART Receive Complete interrupt service routine
ISR(USART_RX_vect) {
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
    char received_char = UDR;
  fe:	8c b1       	in	r24, 0x0c	; 12

    if (received_char == '\n') {
 100:	8a 30       	cpi	r24, 0x0A	; 10
 102:	b9 f0       	breq	.+46     	; 0x132 <USART_RX_vect+0x46>
        gps_data[gps_index] = '\0'; // Null-terminate the received GPS message
        gps_message_complete = 1;
        gps_index = 0;
    } else if (gps_index < sizeof(gps_data) - 1) {
 104:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gps_index>
 108:	9f 37       	cpi	r25, 0x7F	; 127
 10a:	50 f4       	brcc	.+20     	; 0x120 <USART_RX_vect+0x34>
        gps_data[gps_index++] = received_char;
 10c:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <gps_index>
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	9e 0f       	add	r25, r30
 114:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <gps_index>
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e0 59       	subi	r30, 0x90	; 144
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	80 83       	st	Z, r24
    }
}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti
// USART Receive Complete interrupt service routine
ISR(USART_RX_vect) {
    char received_char = UDR;

    if (received_char == '\n') {
        gps_data[gps_index] = '\0'; // Null-terminate the received GPS message
 132:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <gps_index>
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	e0 59       	subi	r30, 0x90	; 144
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	10 82       	st	Z, r1
        gps_message_complete = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
        gps_index = 0;
 144:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gps_index>
 148:	eb cf       	rjmp	.-42     	; 0x120 <USART_RX_vect+0x34>

0000014a <main>:
        gps_data[gps_index++] = received_char;
    }
}

int main() {
    USART_Init();
 14a:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
    sei(); // Enable global interrupts
 14e:	78 94       	sei

    while (1) {
        if (gps_message_complete) {
 150:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 154:	88 23       	and	r24, r24
 156:	e1 f3       	breq	.-8      	; 0x150 <main+0x6>
            // Process the received GPS data here
            USART_SendString("GPS Data: ");
 158:	80 e6       	ldi	r24, 0x60	; 96
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_SendString>
            USART_SendString(gps_data);
 160:	80 e7       	ldi	r24, 0x70	; 112
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_SendString>
            USART_SendString("\n");
 168:	8b e6       	ldi	r24, 0x6B	; 107
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_SendString>

            gps_message_complete = 0;
 170:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
 174:	ed cf       	rjmp	.-38     	; 0x150 <main+0x6>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
